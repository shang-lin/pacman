/*************  REVISION HISTORY  *********************



date: 2002/06/05 01:12:17;  
author: graham;    
Copied menusystem files into final directory



date: 2002/06/04 21:37:57;  
author: nowell;  
Added directory for our final build





date: 2002/06/03 00:55:13;  
author: graham;    
Changed the menusystem classes to use the real drawableobject.h instead of the one i created for testing. also changed <string.h> to <string> in image.h.



date: 2002/06/03 00:04:53;  
author: graham;    
Added math functions to menusystem files.



date: 2002/06/02 23:41:38;  
author: graham;    
Added "using namespace std" to everything



date: 2002/05/13 09:36:27;  
author: graham;    

ScrollingMenuWidget's graphics code is 80% done. i just need to add the code that draws the image corresponding to the selection, and the code that draws the scrollbar. Once that's done, i just need to copy the draw() code into the drawSelected() method and alter the colors.



date: 2002/05/08 07:38:20;  
author: graham;    

Made slight modifications to the widget classes to make MenuPane work.



date: 2002/03/21 02:23:01;  
author: graham;    




date: 2002/03/16 21:27:07;  
author: graham;    

Fixed a slight bug where scrolling past the first element in the list caused a bus error.



date: 2002/03/15 11:48:40;  
author: graham;    

ScrollingMenuWidget is completely tested, as far as eventhandling goes. It doesn't draw yet.



date: 2002/03/15 11:23:26;  
author: graham;    

Untested ScrollingMenuWidget code.



date: 2002/02/21 11:05:56;  
author: graham;    

All the code for RadioWidget except draw- and event-related code. Some minimal code for ScrollingMenuWidget.



date: 2002/02/18 23:59:15;  
author: graham;    

Wrote some of the menusystem setup code.



date: 2002/02/18 21:25:46;  
author: graham;    

I left out a #include in the last commit..



date: 2002/02/18 21:22:22;  
author: graham;  

These are updated header files for the menusystem, as generated by the online documentation.


***********  END REVISION HISTORY **********/


using namespace std;


#ifndef _SCROLLINGMENUWIDGET_H_
#define _SCROLLINGMENUWIDGET_H_


// The includes for the superclasses are automatically listed.
// You need to specify any others
#include "ScrollingMenuEntry.h"
#include "MenuWidget.h"
#include "drawableobject.h"
#include "Event.h"
#include <string>
#include <math.h>




// Description:
//
// This is the abstract ScrollingMenuWidget Class. It is subclassed 
// in HorizontalScrollingWidget and VerticalScrollingWidget. 
// 

class ScrollingMenuWidget : public MenuWidget{
		// Data Members

	private:
		// this is the index of the currently selected item in the array
		int currSelection;
		
		// the number of items in the list
		int numItems;
		
		// Items in the menu. Scrolling menus can contain up to 100 items. 
		ScrollingMenuEntry * sme [100];
		
		// The widget identification number
		int widgetID;
		
		// angles for animation
		double r1, r2, r3;



	public:


		// Methods

	private:


	public:
		// Adds the given image/caption pair as an item in the menu, 
		// and assigns that pair and int ID. 
		void addMenuItem( int, string, int );

		// Returns the ID of the currently selected item in the menu. 
		int getSelection( void );
		
		// Returns the number of items
		int getNumItems ( void );

		// Selects the next item in the menu. 
		void selectNext( void );

		// Selects the previous item in the menu. 
		void selectPrevious( void );
		
		// handles Events
		void receiveEvent( Event * );
		
		// Returns the widget identification number
		int getWidgetID( void );
		
		// returns true if ANY entry in the list has an associated
		// image
		bool usesImages ( void );

		// these are just for testing:
		string getCaption (void );
		int getImageID (void );
		
		// returns true because the user can select this kind of menuwidget
		bool isSelectable (void) { return true; }
		
		// Draws the widget in "selected" mode and "regular" mode, repectively
		void drawSelected( void );
		void draw( void );

		// Constructor(s)

		// Constructs a ScrollingMenuWidget with a specified width, height, 
		// and location. It also specifies the maximum number of items 
		// that the menu can contain. the last argument is the widget
		// identification number
		ScrollingMenuWidget ( int, int, int, int, int );



		// Destructor

		~ScrollingMenuWidget ( void );

};

#endif
