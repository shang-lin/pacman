/*************  REVISION HISTORY  *********************



date: 2002/06/05 01:12:17;  
author: graham;    
Copied menusystem files into final directory



date: 2002/06/04 21:37:57;  
author: nowell;  
Added directory for our final build





date: 2002/06/03 00:55:13;  
author: graham;    
Changed the menusystem classes to use the real drawableobject.h instead of the one i created for testing. also changed <string.h> to <string> in image.h.



date: 2002/06/03 00:04:53;  
author: graham;    
Added math functions to menusystem files.



date: 2002/06/02 23:41:38;  
author: graham;    
Added "using namespace std" to everything



date: 2002/05/10 09:44:09;  
author: graham;    

Slight tweaks to the graphics code.



date: 2002/05/10 01:41:13;  
author: graham;    

Added more graphics code.



date: 2002/05/08 07:38:20;  
author: graham;    

Made slight modifications to the widget classes to make MenuPane work.



date: 2002/03/21 02:23:01;  
author: graham;    




date: 2002/03/16 21:28:19;  
author: graham;    

Added a widgetID variable and accessor methods to each MenuWidget so that MenuPane could keep track of them.



date: 2002/03/14 20:52:40;  
author: graham;    

Completely tested LabelWidget code, except for drawing. labeltest.cc is testing code.



date: 2002/02/19 02:47:09;  
author: graham;    

Added a setText() method to LabelWidget. Also added more menu setup code to MenuSystem.



date: 2002/02/18 21:25:46;  
author: graham;    

I left out a #include in the last commit..



date: 2002/02/18 21:22:22;  
author: graham;  

These are updated header files for the menusystem, as generated by the online documentation.


***********  END REVISION HISTORY **********/


using namespace std;








#ifndef _LABELWIDGET_H_
#define _LABELWIDGET_H_


// The includes for the superclasses are automatically listed.
// You need to specify any others
#include "MenuWidget.h"
#include "drawableobject.h"
#include <math.h>
#include <string>


// Description:
//
// This is a simple text label widget. It doesn't have any value 
// or accept any events. it cannot be selected. 

class LabelWidget : public MenuWidget{
		// Data Members

	private:
		// The text for the label. 
		string text;
		
		// the widget identification number
		int widgetID;

		// these are angles used in the draw() functions for positioning
		float r1;
		float r2;
		float r3;


	public:


		// Methods

	private:


	public:
		// Labels do not handle events, so any events are ignored. 
		void receiveEvent( Event * );

		// Draws the widget in "selected" mode and "regular" mode, repectively
		void drawSelected( void );
		void draw( void );

		// Sets the text of this label to the string s. 
		void setText( string );

		// Sets the text of this label to a string representing the value of the
		// integer argument. 
		void setText( int i );

		// Returns the text of this label. 
		string getText( void );
		
		// returns the ID of the widget
		int getWidgetID ( void );
		
		// returns false because the user cannot select this kind of menuwidget
		bool isSelectable (void) { return false; }

		// Constructor(s)

		// Creates a label with the specified position and dimensions 
		// and sets its label to text. The last int is an ID number
		// that is used to identify the widget
		LabelWidget ( int, int, int, int, string , int);


};

#endif
