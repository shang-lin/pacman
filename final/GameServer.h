#ifndef _GAMESERVER_H_
#define _GAMESERVER_H_

/* This class runs the server that controls the game.  It receives input (moves) from the clients, and governs the interactions between all players and items in the game. */

class GameServer;

using namespace std;
#include "Level.h"
#include "GameRules.h"
#include "BaseItem.h"
#include "ServerGameboard.h"
#include "AIGhost.h"
#include "RUDP.h"

class GameServer{
 public:
  GameServer(Level *newlevel, int max_pacmen, int max_ghosts, int num_AI, int gametype);  // depending on the gametype, either max_ghosts or num_AI should be 0.
  
  // void addListener( EventListener* );
  // Registers an EventListener with the server, so that when events 
  // are
  // generated by the server, they are given to listener as well 
  // as any
  // others that have been registered. 

  ~GameServer();

  bool CanIMove( Player*, Space* );
  // Request to move into the specified space 
 
  void CanITake( Player*, Space* );
  // Request to take the specified item

  void changeScore(Player *who, int amount);

  void CanIRespawn( Player* );
  // Called after a player dies, checks type of player, possibly 
  // number of lives, etc.  Possibly also used when a new player 
  // enters the game. 

  float getTime();

  int RunGame( void );
  // This will be a separate thread that will control the time 
  // for synchronization with clients, as well as calling AI players' 
  // decision functions. 

  void setCurrentRules( GameRules *gr);
  // Sets the current rule set pointer to gr. 

  void invokeItemRules( BaseItem *bi, Player* eater);
  // Makes the rules associated with the specified item the current 
  // rules. 

  void setGameMode( int gametype);
  // Sets the game mode. This function does nothing if we're in 
  // the middle of a game. 

  int getGameMode( void );
  // Returns the game mode. 

  void receivePacket(UDPacket *pack);

 private:
  bool Collision( Player* first, Player* second);
  // Called by the CanIMove function when a player requests a move 
  // into an occupied space 

  void movePlayers(float deltatime);
  void updateClients();
  void AIdecisions();

  ServerGameboard *theGame;

  //ServerGameboard* theGame;
  // The game that the gameserver is running. 

  Player** AIplayerlist;
  // A list of the AI ghosts 

  RUDP *socket;
  sockaddr_in** clientads;
  int numclients;

  GameRules* defaultRules;
  // The default rules. These rules shouldn't change over the course 
  // of the game. 

  int numRules;

  GameRules** currentRules;
  // The rules currently being used by the server.  These can be 
  // changed whenever an item is eaten. This needs to be seperate 
  // from the default rules because special rule sets generally 
  // only run for a certain amount of time. 

  GameMechanicsRules* currentMechanics;

  int mode;
  // The gameplay mode. This is an enumerated type. 

  Player** playerlist;
  int* AIlist;

  int numplayers;
  int max_pac;
  int max_gh;
  int num_aigh;
  float gametime;
  float gamelength;
  int endgame;
  int packillbonus, pacdeathpenalty, ghostkillbonus, ghostdeathpenalty;

};

#endif

