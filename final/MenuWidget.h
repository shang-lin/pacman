/*************  REVISION HISTORY  *********************



date: 2002/06/05 01:12:17;  
author: graham;    
Copied menusystem files into final directory



date: 2002/06/04 21:37:57;  
author: nowell;  
Added directory for our final build





date: 2002/06/05 00:30:46;  
author: graham;    
Tweaked drawing methods.



date: 2002/06/03 00:55:13;  
author: graham;    
Changed the menusystem classes to use the real drawableobject.h instead of the one i created for testing. also changed <string.h> to <string> in image.h.



date: 2002/06/03 00:04:53;  
author: graham;    
Added math functions to menusystem files.



date: 2002/06/02 23:41:38;  
author: graham;    
Added "using namespace std" to everything



date: 2002/05/12 11:43:40;  
author: graham;    

No changes were made these files, but CVS insists that i need to commit them again.



date: 2002/05/12 09:34:45;  
author: graham;    

Added two #defines to control what set of graphics options the menusystem compiles with. The options toggle "swim mode" for selected and unselected widgets. If swim mode is on, the item "swims" around the screen. otherwise, it stays in one place.



date: 2002/05/10 10:12:18;  
author: graham;    

Modifications to tweak graphics code.



date: 2002/05/09 12:08:41;  
author: graham;    

Added #include <GL/glut.h> so that class could access openGL routines.



date: 2002/05/08 07:38:20;  
author: graham;    

Made slight modifications to the widget classes to make MenuPane work.



date: 2002/05/08 03:00:03;  
author: graham;    

Added a isSelectable function so that menupanes can tell which widget to tab to next.



date: 2002/05/07 02:28:28;  
author: graham;    

Added an isSelectable() function to all menuwidgets. It returns true if the widget is something that can be modified (eg, a slider) and false if it cannot be modified (eg, a label). MenuPane needs this information when it moves from one widget to the next.



date: 2002/03/21 02:23:01;  
author: graham;    




date: 2002/03/16 21:28:19;  
author: graham;    

Added a widgetID variable and accessor methods to each MenuWidget so that MenuPane could keep track of them.



date: 2002/03/14 20:38:00;  
author: graham;    

The ButtonWidget code here is completely tested, except that the graphics stuff isn't done yet. The Event classes are test event classes that construct inputevents out of alphanumeric keypresses for the purpose of testing the widgets.



date: 2002/02/18 21:25:46;  
author: graham;    

I left out a #include in the last commit..



date: 2002/02/18 21:22:22;  
author: graham;  

These are updated header files for the menusystem, as generated by the online documentation.


***********  END REVISION HISTORY **********/


using namespace std;


#ifndef _MENUWIDGET_H_
#define _MENUWIDGET_H_


// The includes for the superclasses are automatically listed.
// You need to specify any others
//#include "allmenu.h"
#include "Event.h"
#ifdef __APPLE__
	#include <GLUT/glut.h>
#endif

#ifndef __APPLE__
	#include <GL/glut.h>
#endif
#include "drawableobject.h"
#include <string>
#include <math.h>
#include "text.h"



// if this line is commented out, selected items do not swim around
//#define k_SELECTED_ITEMS_SWIM

// if this line is commented out, unselected items do not swim around
#define k_UNSELECTED_ITEMS_SWIM



// Description:
//
// This is a general class of objects that can be inserted into 
// a MenuPane. These objects respond to keyboard events. When 
// the MenuPane terminates, the values of the MenuWidgets are 
// collected and returned. 
//
// Because this is an abstract class, none of its methods are ever
// actually called (because the class is never instantiated) so
// all or most of its methods are empty functions defined only
// to make the compiler happy.
//
class MenuWidget : public DrawableObject{
		// Data Members

	private:
		bool canBeSelected;
	public:


		// Methods

	private:
	public:
		virtual int getWidgetID ( void ) { return 0; }
		
		// Draws the widget in "selected" mode and "regular" mode, repectively
		virtual void drawSelected( void ){
			// nothing to do
		}
		
		virtual void draw( void ){
			// nothing to do
		}

		// virtual method that handles events (ie, keypresses)
	virtual void receiveEvent ( Event * e){
	// do nothing;
	}
	
		// some menu widgets can be selected and tabbed to. others, like
		// labelwidgets cannot. this virtual metho returns true
		// if the item can be selected and false otherwise. the
		// default value is false;
		virtual bool isSelectable ( void ) { return false; }

		// Constructor(s)

		// Creates a MenuWidget with the specified dimensions and location and ID.
		// 
		MenuWidget ( int, int, int, int, int );
		
		virtual ~MenuWidget (void){
			// nothing to do
		}
};

#endif
