/*************  REVISION HISTORY  *********************



date: 2002/06/05 01:12:17;  
author: graham;    
Copied menusystem files into final directory



date: 2002/06/04 21:37:57;  
author: nowell;  
Added directory for our final build





date: 2002/06/03 00:55:13;  
author: graham;    
Changed the menusystem classes to use the real drawableobject.h instead of the one i created for testing. also changed <string.h> to <string> in image.h.



date: 2002/06/03 00:04:53;  
author: graham;    
Added math functions to menusystem files.



date: 2002/06/02 23:41:38;  
author: graham;    
Added "using namespace std" to everything



date: 2002/05/09 12:06:48;  
author: graham;    

Added rudimentary graphics code.



date: 2002/05/08 07:38:20;  
author: graham;    

Made slight modifications to the widget classes to make MenuPane work.



date: 2002/03/21 05:27:28;  
author: graham;    

Added comments to the code.



date: 2002/03/21 02:23:01;  
author: graham;    




date: 2002/03/16 21:28:19;  
author: graham;    

Added a widgetID variable and accessor methods to each MenuWidget so that MenuPane could keep track of them.



date: 2002/03/15 05:33:09;  
author: graham;    

This is a fully functional sliderwidget class.



date: 2002/02/18 22:05:17;  
author: graham;    

I've added most of the code for the SliderWidget. The only thing i haven't added is the Event-handling code and the Drawing code.



date: 2002/02/18 21:53:32;  
author: graham;    

Added mutator methods to this class.



date: 2002/02/18 21:25:46;  
author: graham;    

I left out a #include in the last commit..



date: 2002/02/18 21:22:22;  
author: graham;  

These are updated header files for the menusystem, as generated by the online documentation.


***********  END REVISION HISTORY **********/



using namespace std;

#ifndef _SLIDERWIDGET_H_
#define _SLIDERWIDGET_H_


// The includes for the superclasses are automatically listed.
// You need to specify any others
#include "MenuWidget.h"
#include "drawableobject.h"
#include <math.h>


// Description:
//
// This is a slider widget. You can specify the length and height 
// of the slider. pressing up/rightarrow increases the value, 
// and pressing down/leftarrow decreases the value. 

class SliderWidget : public MenuWidget{
		// Data Members

	private:
		// The current value of the slider. 
		int value;

		// The minimum value represented by the slider. 
		int minValue;

		// The maximum value represented by the slider. 
		int maxValue;

		// the widget identification number
		int widgetID;

		// these are angles used in the draw() functions for positioning
		float r1;
		float r2;
		float r3;

	public:


		// Methods

	private:


	public:
		// Returns the current value shown on the slider rounded off 
		// to the nearest integer. 
		int getSliderValue( void );

		// Increases the value by one step. 
		void increaseValue( void );

		// Decreases the value by one step. 
		void decreaseValue( void );

		// Sets the value displayed on the slider to the given value 
		// if it is between the max and min values. Otherwise, it does 
		// nothing. 
		void setSliderValue( int );

		// Sliders call increment when the user hits rightarrow or uparrow, 
		// and decrement when the user hits leftarrow or downarrow. These 
		// are the only events this class of Widgets handles. 
		void receiveEvent( Event * );

		// Draws the widget in "selected" mode and "regular" mode, repectively
		void drawSelected( void );
		void draw( void );

		// sets the minimum value of the slider. 
		void setMinValue( int );

		// Sets the maximum value of the slider. 
		void setMaxValue( int );

		// Returns the maximum value of the slider. 
		int getMaxValue( void );

		// Returns the minimum value of the slider. 
		int getMinValue( void );

		// returns the ID of the widget
		int getWidgetID ( void );
		
		// returns true because the user can select this kind of menuwidget
		bool isSelectable (void) { return true; }


		// Constructor(s)

		// Creates a slider of a specified width, in a specified location, 
		// with specified max and min values, and with a specified initial 
		// value. The final argument is the widget identification number.
		SliderWidget ( int, int, int, int, int, int, int );


		// Destructor

		~SliderWidget ( void );

};

#endif
