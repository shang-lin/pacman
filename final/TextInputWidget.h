/*************  REVISION HISTORY  *********************



date: 2002/06/05 01:12:17;  
author: graham;    
Copied menusystem files into final directory



date: 2002/06/04 21:37:57;  
author: nowell;  
Added directory for our final build





date: 2002/06/03 00:55:13;  
author: graham;    
Changed the menusystem classes to use the real drawableobject.h instead of the one i created for testing. also changed <string.h> to <string> in image.h.



date: 2002/06/03 00:04:53;  
author: graham;    
Added math functions to menusystem files.



date: 2002/06/02 23:41:38;  
author: graham;    
Added "using namespace std" to everything



date: 2002/05/12 10:08:06;  
author: graham;    

Stripped down the TextInputWidget class. I was having some trouble getting strings to work right. I suspect it's a problem with files on my machine, since it worked fine when i tested it before. This way, the drawing is also more straightforward. Instead of being able to move around in the text with arrowkeys, you add to or delete from the end of the string. This way, i can easily use a character array to contain the string (since i don't have the problem of addinf characters in the middle of the string) and i don't have to draw a cursor.



date: 2002/05/09 12:06:48;  
author: graham;    

Added rudimentary graphics code.



date: 2002/05/08 07:38:20;  
author: graham;    

Made slight modifications to the widget classes to make MenuPane work.



date: 2002/03/21 05:27:28;  
author: graham;    

Added comments to the code.



date: 2002/03/21 02:23:01;  
author: graham;    




date: 2002/03/16 21:28:19;  
author: graham;    

Added a widgetID variable and accessor methods to each MenuWidget so that MenuPane could keep track of them.



date: 2002/03/15 04:31:27;  
author: graham;    

modified textinputwidget classes, and a textinputtest program. the text input widget isn't quite perfect yet; there are still some issues with it not retaining the correct cursor position when characters are deleted from the end of the string, as well as the up and down arrows not moving the cursor to the beginning and end of the input text.



date: 2002/02/22 00:11:50;  
author: graham;    

Finished the code for textinputwidget, except the drawing code. I added a deleteChar function to allow users to delete text that they had entered. I also added numChars and maxChars variables to keep track of the maximum and current number of characters in the input box. There are also accessor and mutator functions for those two variables.



date: 2002/02/18 21:25:46;  
author: graham;    

I left out a #include in the last commit..



date: 2002/02/18 21:22:22;  
author: graham;  

These are updated header files for the menusystem, as generated by the online documentation.


***********  END REVISION HISTORY **********/


using namespace std;


#ifndef _TEXTINPUTWIDGET_H_
#define _TEXTINPUTWIDGET_H_


// The includes for the superclasses are automatically listed.
// You need to specify any others
#include "MenuWidget.h"
#include "drawableobject.h"
#include <string>
#include <math.h>


// Description:
//
// This object contains a string of user-editable text. 

class TextInputWidget : public MenuWidget{
		// Data Members

	private:
		// The current text in the input box. 
		char * text;
		
		// the next blank space in the character array
		int position;
		
		// The maximum number of characters the user can type into this 
		// text input box. 
		int maxChars;

		
		// The widget identification number
		int widgetID;
		
		// these are angles used in the draw() functions for positioning
		float r1;
		float r2;
		float r3;

	public:


		// Methods

	private:


	public:
		// Copies the string in the Widget to the string pointed to by 
		// s. 
		string getValue( void );

		// Copies the string to which s points into the string representing 
		// the text contained in the text box. 
		void setValue( string );

		// Inserts the character into the text input box at the current 
		// position. 
		void insertChar( char );

 		// text input widgets accept the following events:
		//
 		// delete: delete the character before the cursor if one exists
		//
		// forwarddelete : delete the character after the cursor if one 
		// exists
 		// alphanumeric : insert the character into the text box at the 
		// current position 
		void receiveEvent( Event * );

		// Sets the maximum number of characters the user can type into 
		// this widget. 
		void setMaxChars( int );

		// Returns the maximum number of characters that the user is 
		// allowed to type into the text box. 
		int getMaxChars( void );

		// Returns the current number of characters. 
		int getNumChars( void );

		// Deletes the last character. 
		void deleteChar( void );
		
		// Returns the widget identification number
		int getWidgetID ( void ) ;
		
		// returns true because the user can select this kind of menuwidget
		bool isSelectable (void) { return true; }

		// Draws the widget in "selected" mode and "regular" mode, repectively
		void drawSelected( void );
		void draw( void );


		// Constructor(s)

		// Creates a text input box of a specified width at a specified 
		// location, with a specified character limit. The final argument
		// is the widget identification number.
		TextInputWidget ( int, int, int, int, int );

		// Creates a text input box of a specified width at a specified 
		// location, with a specified character limit, and with specified 
		// default text. The final argument is the widget identification number.
		TextInputWidget ( int, int, int, int, string, int );



		// Destructor

		~TextInputWidget ( void );

};

#endif
